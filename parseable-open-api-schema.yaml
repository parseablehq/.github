openapi: 3.0.0
info:
  title: Log Stream Management
  version: 1.0.0
  description: |-
    The schema contains API for Parseable OSS and Enterprise few of the API end points are only limited to enterprise version. 
servers:
  - url: https://demo.parseable.com/
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
  - basicAuth: []
paths:
  /api/v1/logstream/{stream_name}:
    put:
      tags:
        - Dataset Management
      summary: Create a log stream
      description: |
        This endpoint is used to create a new log stream within Parseable.  
        A **log stream** is a group of similar logs. For example, you can create a log stream for a specific application's logs, another log stream for your database logs, and so on. You can create as many log streams as needed to organize and manage logs efficiently.  
      requestBody:
        content: {}
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Dataset Management
      summary: Delete a log stream
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Dataset Management
      summary: Send logs to a log stream URL
      description: |
        **Log Ingestion API via Stream Endpoint**  
        In this approach, you need to create a stream first using the **Create Stream API**.  
        Once the stream is created, you can send logs to the stream ingestion API endpoint:  
        **http://{{endpoint}}/api/v1/logstream/{{stream_name}}**  
        This API does not require any headers for specifying the stream name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - id: 434a5f5e-2f5f-11ed-a261-asdasdafgdfd
                  datetime: 24/Jun/2022:14:12:15 +0000
                  host: 153.10.110.81
                  user-identifier: >-
                    Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:64.0)
                    Gecko/20100101 Firefox/64.0
                  method: PUT
                  status: 500
                  referrer: http://www.google.com/
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/logstream:
    get:
      tags:
        - Dataset Management
      summary: List all log streams
      security:
        - basicAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/logstream/{stream_name}/schema:
    get:
      tags:
        - Dataset Management
      summary: Get Schema from the Stream
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/logstream/{stream_name}/stats:
    get:
      tags:
        - Dataset Management
      summary: Get storage stats for a stream
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/query:
    post:
      tags:
        - Query
      summary: Query a log stream
      description: |
        **Parseable Log Query API**  
        The Parseable log query API allows you to query logs in real-time using **standard PostgreSQL syntax**.  
        To retrieve logs, the API requires **startTime** and **endTime** parameters. 
        
        #### Timezone and Format  
        Parseable expects both the **startTime** and **endTime** in **UTC**, following **RFC 3339** and **ISO 8601** standards.  
        Example format: **2022-09-10T05:00:00+00:00** 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                query: select * from {{stream_name}}
                startTime: '2022-09-10T05:00:00+00:00'
                endTime: '2022-09-10T05:32:00+00:00'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /api/v1/ingest:
    post:
      tags:
        - Data Ingestion
      summary: Send logs to a log stream with HTTP Header
      description: |
        **Log Ingestion API via Ingestion Endpoint and HTTP Header**  
        In this approach, you can add the **x-p-stream** header to the request to specify the stream name.  
        If the stream does not exist, it will be created automatically.  

        This method is particularly useful for **automation scenarios**, where you want to dynamically create a stream  
        and send logs to it via agents without requiring a separate stream creation step.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - id: 434a5f5e-2f5f-11ed-a261-asdasdafgdfd
                  datetime: 24/Jun/2022:14:12:15 +0000
                  host: 153.10.110.81
                  user-identifier: >-
                    Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:64.0)
                    Gecko/20100101 Firefox/64.0
                  method: PUT
                  status: 500
                  referrer: http://www.google.com/
      security:
        - basicAuth: []
      parameters:
        - name: X-P-Stream
          in: header
          schema:
            type: string
          example: '{{stream_name}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/logstream/{stream_name}/retention:
    put:
      tags:
        - Dataset Management
      summary: Set retention for a stream
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - description: delete after 20 days
                  action: delete
                  duration: 1d
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Dataset Management
      summary: Get retention for a stream
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/user/{user_to_create}:
    post:
      tags:
        - User Management
      summary: Create a user with a role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - public
      security:
        - basicAuth: []
      parameters:
        - name: user_to_create
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - User Management
      summary: Delete a user
      security:
        - basicAuth: []
      parameters:
        - name: user_to_create
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/user/{user_to_create}/generate-new-password:
    post:
      tags:
        - User Management
      summary: Reset a user's password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - basicAuth: []
      parameters:
        - name: user_to_create
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/user:
    get:
      tags:
        - User Management
      summary: List all users
      security:
        - basicAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/user/{user_to_create}/role:
    get:
      tags:
        - User Management
      summary: Get a user's role
      security:
        - basicAuth: []
      parameters:
        - name: user_to_create
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Dataset Management
      summary: Add role to a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - public
                - admin
      security:
        - basicAuth: []
      parameters:
        - name: user_to_create
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/role/{rolename}:
    put:
      tags:
        - Role Management
      summary: Create a role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - privilege: writer
                  resource:
                    stream: app
      parameters:
        - name: rolename
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Role Management
      summary: Get a role
      parameters:
        - name: rolename
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/role:
    get:
      tags:
        - Role Management
      summary: Get all roles
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/role/Dataset Management:
    put:
      tags:
        - Role Management
      summary: Set Dataset Management role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: public
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Role Management
      summary: Get Dataset Management role
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
